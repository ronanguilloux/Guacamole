[{"tags":[],"description":{"full":"<p>Guacamole.js<br />Copyright (c) 2011 Toog &lt;<a href='mailto:contact@toog.fr'>contact@toog.fr</a>&gt;<br />MIT Licensed</p>","summary":"<p>Guacamole.js<br />Copyright (c) 2011 Toog &lt;<a href='mailto:contact@toog.fr'>contact@toog.fr</a>&gt;<br />MIT Licensed</p>","body":""},"ignore":false},{"tags":[],"description":{"full":"<p>HTTP port</p>","summary":"<p>HTTP port</p>","body":""},"ignore":false,"code":"var port = 4000;","ctx":{"type":"declaration","name":"port","value":"4000","string":"port"}},{"tags":[],"description":{"full":"<p>Library version</p>","summary":"<p>Library version</p>","body":""},"ignore":false,"code":"exports.version = '0.0.1';","ctx":{"type":"property","receiver":"exports","name":"version","value":"'0.0.1'","string":"exports.version"}},{"tags":[],"description":{"full":"<p>Module dependencies</p>","summary":"<p>Module dependencies</p>","body":""},"ignore":false,"code":"var express = require('express')\n    mongoose = require('mongoose'),\n    models = require('./models'),\n    form = require('connect-form'),\n    _ = require('underscore');","ctx":{"type":"declaration","name":"express","value":"require('express')","string":"express"}},{"tags":[],"description":{"full":"<p>Vars</p>","summary":"<p>Vars</p>","body":""},"ignore":false,"code":"var db, headers, Document, Tag;"},{"tags":[],"description":{"full":"<p>Server instance</p>","summary":"<p>Server instance</p>","body":""},"ignore":false,"code":"var app = module.exports = express.createServer(\n    form({\n        keepExtensions: true,\n        uploadDir: './uploads'\n    })\n);","ctx":{"type":"declaration","name":"app","value":"module.exports = express.createServer(","string":"app"}},{"tags":[],"description":{"full":"<p>Server configuration</p>","summary":"<p>Server configuration</p>","body":""},"ignore":false,"code":"app.configure(function(){\n    app.set('views', __dirname + '/views');\n    app.set('view engine', 'jade');\n    app.use(express.compiler({ src: __dirname + '/public', enable: ['less']}));\n    app.use(express.bodyParser());\n    app.use(express.methodOverride());\n    app.use(app.router);\n    app.use(express.static(__dirname + '/public'));\n});"},{"tags":[],"description":{"full":"<p>Environment configuration</p>","summary":"<p>Environment configuration</p>","body":""},"ignore":false,"code":"app.configure('development', function(){\n    app.use(express.errorHandler({ dumpExceptions: true, showStack: true }));\n});\n\napp.configure('production', function(){\n    app.use(express.errorHandler());\n});"},{"tags":[{"type":"param","types":["Object"],"name":"longoose","description":""},{"type":"param","types":["Function"],"name":"callback","description":""}],"description":{"full":"<p>Model definition, using mongoose</p>","summary":"<p>Model definition, using mongoose</p>","body":""},"isPrivate":false,"ignore":false,"code":"models.define(mongoose, function(){\n    app.Document = Document = mongoose.model('Document');\n    app.Tag = Tag = mongoose.model('Tag');\n    db = mongoose.connect('mongodb://localhost/docs');\n});"},{"tags":[{"type":"param","types":["ServerResponse"],"name":"response","description":""},{"type":"param","types":["Mixed"],"name":"error","description":""},{"type":"param","types":["Integer"],"name":"HTTP","description":"status code"},{"type":"return","types":["ServerResponse"],"description":""}],"description":{"full":"<p>Error handler<br />log errors &amp; send a (503 by default) status code with error message</p>","summary":"<p>Error handler<br />log errors &amp; send a (503 by default) status code with error message</p>","body":""},"isPrivate":false,"ignore":false,"code":"var handleError = function(res, err, status){\n    status = status || 503; // Service Unavailable\n    err = err || status;\n    console.log({'status': status, 'error': err});\n    return res.send(status, {error: err});\n}\n\n\napp.get('/', function(req, res){\n    res.render('index.jade', { title: 'Docs' });\n});\n\napp.post('/', function(req, res){\n\n    req.form.complete(function(err, fields, files) {\n        if (err) return handleError(res, err);\n        if (!err && files.resource){\n            var doc = new Document(_.extend(fields, {\n                resource: {\n                    name: files.resource.filename,\n                    file: files.resource.path\n                }\n            }));\n            doc.save(function(err){\n                if (!err) json = {'success': true, 'document': doc};\n                else json = {'success': false, 'error': err};\n                res.send(json);\n            });\n        } else {\n            res.send({'success': false, 'error': err}); // TODO 500\n        }\n    });\n\n});","ctx":{"type":"function","name":"handleError","string":"handleError()"}},{"tags":[],"description":{"full":"<h2>DOCUMENT Routes</h2>","summary":"<h2>DOCUMENT Routes</h2>","body":""},"ignore":false},{"tags":[{"type":"param","types":["Object"],"name":"request","description":""},{"type":"param","types":["Object"],"name":"response","description":""},{"type":"param","types":["Object"],"name":"headers","description":""},{"type":"return","types":["Json"],"description":"documents list"},{"type":"api","visibility":"public"}],"description":{"full":"<p>GET documents</p>","summary":"<p>GET documents</p>","body":""},"isPrivate":false,"ignore":false,"code":"app.get('/documents', function(req, res, headers){\n\n    var query = {};\n    var tags;\n\n    if (tags = req.query.tags){\n        tags = _.isArray(tags) ? tags : tags.split(',');\n        query = {\n            // crado en attendant le $and de mongo 1.9.1\n            // ou alors map / reduce ???\n            $where: 'function(){ var ok = true; [\"' + tags.join('\",\"') + '\"].forEach(function(e){ if (obj.tags.indexOf(e) == -1) ok = false; }); return ok; }'\n        }\n    }\n\n    // LISTE et QUERY\n    // limit, offset, filtres, sort, search\n    Document.find(query, function (err, docs){\n        if (err) return handleError(res, err);\n        res.send(docs);\n    });\n\n});"},{"tags":[{"type":"param","types":["Object"],"name":"request","description":""},{"type":"param","types":["Object"],"name":"response","description":""},{"type":"param","types":["Object"],"name":"headers","description":""},{"type":"return","types":["Json"],"description":"one document matching the slug parameter"},{"type":"api","visibility":"public"}],"description":{"full":"<p>GET documents/:slug</p>","summary":"<p>GET documents/:slug</p>","body":""},"isPrivate":false,"ignore":false,"code":"app.get('/documents/:slug', function(req, res, headers){\n    Document.findOne({ slug: req.params.slug }, function(err, doc){\n        if (err) return handleError(res, err);\n        if (!doc) return res.send(404);\n        res.send(doc, headers);\n    });\n\n});"},{"tags":[{"type":"param","types":["Object"],"name":"request","description":""},{"type":"param","types":["Object"],"name":"response","description":""},{"type":"param","types":["Object"],"name":"headers","description":""},{"type":"return","types":["Json"],"description":"the saved document"},{"type":"api","visibility":"public"}],"description":{"full":"<p>POST document, CREATE a document</p>","summary":"<p>POST document, CREATE a document</p>","body":""},"isPrivate":false,"ignore":false,"code":"app.post('/documents', function(req, res, headers){\n\n    // création thumbnail\n\n    req.form.complete(function(err, fields, files){\n        if (err) return handleError(res, err);\n        if (files.resource){\n            var doc = new Document(_.extend(fields, {\n                resource: {\n                    name: files.resource.filename,\n                    file: files.resource.path\n                }\n            }));\n            doc.save(function(err){\n                if (err) return handleError(res, err);\n                return res.send(doc, headers);\n            });\n        }\n        return handleError(res, {'message' : 'No files resources found'});\n    });\n\n});"},{"tags":[{"type":"param","types":["Object"],"name":"request","description":""},{"type":"param","types":["Object"],"name":"response","description":""},{"type":"param","types":["Object"],"name":"headers","description":""}],"description":{"full":"<p>DELETE documents</p>","summary":"<p>DELETE documents</p>","body":""},"isPrivate":false,"ignore":false,"code":"app.del('/documents/:id', function(req, res, headers){\n\n    Document.findOne({ _id: req.params.id }, function(err, doc){\n        if (err) return handleError(res, err);\n        if (!doc) return res.send(404);\n        doc.remove(function(){\n            res.send({}, headers);\n        });\n    });\n\n});"},{"tags":[],"description":{"full":"<p>PUT documents (update)</p>","summary":"<p>PUT documents (update)</p>","body":""},"ignore":false,"code":"app.put('/documents/:id', function(req, res, headers){\n\n    // todo : gérer pièce jointe\n    // todo : si pj, recalculer thumbnail\n\n    Document.findOne({ _id: req.params.id }, function(err, doc){\n        if (err) return handleError(res, err);\n        if (!doc) return res.send(404);\n        doc.set(req.body);\n        doc.save(function(err){\n            if (err) return handleError(res, err);\n            return res.send(doc, headers);\n        });\n    });\n\n});"},{"tags":[],"description":{"full":"<h2>TODO</h2>\n\n<h2>Ajouter les actions suivantes</h2>\n\n<ul>\n<li>modification de masse (sur selection de documents) : sur liste</li>\n<li>suppression masse : sur liste\n<ul><li>update thumb : forcer recalcul de la thumbnail</li></ul></li>\n</ul>","summary":"<h2>TODO</h2>\n\n<h2>Ajouter les actions suivantes</h2>\n\n<ul>\n<li>modification de masse (sur selection de documents) : sur liste</li>\n<li>suppression masse : sur liste\n<ul><li>update thumb : forcer recalcul de la thumbnail</li></ul></li>\n</ul>","body":""},"ignore":false},{"tags":[],"description":{"full":"<h2>TAGS Routes</h2>","summary":"<h2>TAGS Routes</h2>","body":""},"ignore":false},{"tags":[],"description":{"full":"<p>GET /tags : all tags</p>","summary":"<p>GET /tags : all tags</p>","body":""},"ignore":false,"code":"app.get('/tags', function(req, res, headers){\n\n    Tag.find().sort('label', 'ascending').execFind(function (err, tags) {\n        if (err) return handleError(res, err);\n        res.send(tags, headers);\n    });\n\n});"},{"tags":[],"description":{"full":"<p>GET /tags/semantic : all <em>semantic</em> tags</p>","summary":"<p>GET /tags/semantic : all <em>semantic</em> tags</p>","body":""},"ignore":false,"code":"app.get('/tags/semantic', function(req, res, headers){\n\n    Tag.find({label:/^[^'::']/}).sort('label', 'ascending').execFind(function (err, tags) {\n        if (err) return handleError(res, err);\n        res.send(tags, headers);\n    });\n\n});"},{"tags":[],"description":{"full":"<p>GET /tags/treeview : all <em>treeview</em> tags<br />= the ones that start with '::'</p>","summary":"<p>GET /tags/treeview : all <em>treeview</em> tags<br />= the ones that start with '::'</p>","body":""},"ignore":false,"code":"app.get('/tags/treeview', function(req, res){\n\n    Tag.find({label:/^['::']/}).sort('label', 'ascending').execFind(function (err, tags) {\n        if (err) return handleError(res, err);\n        res.send(tags);\n    });\n\n});"},{"tags":[],"description":{"full":"<p>GET /tags/starting/:str : all tag labels starting by ':str'</p>","summary":"<p>GET /tags/starting/:str : all tag labels starting by ':str'</p>","body":""},"ignore":false,"code":"app.get('/tags/starting/:str', function(req, res, headers){\n\n\tvar result = [];\n\t// unwanted requests give all semantic tags\n    if (req.params.str.indexOf(':') == 0){\n        // Every unawted search returns all semantic tags\n        Tag.find({label:/^[^'::']/}).sort('label', 'ascending').execFind(function (err, tags) {\n            if (err) return handleError(res, err);\n            return res.send(tags, headers);\n        });\n    }\n\n    var regular = new RegExp(\"^\" + req.params.str);\n    Tag.find({label:regular}).sort('label', 'ascending').execFind(function (err, tags) {\n        if (err) return handleError(res, err);\n        if(0 == tags.length){\n            return res.send(204);\n        }\n        res.send(tags, headers);\n\n    });\n\n});"},{"tags":[],"description":{"full":"<p>POST tags (create)</p>","summary":"<p>POST tags (create)</p>","body":""},"ignore":false,"code":"app.post('/tags', function(req, res, headers){\n\n    // TODO\n    res.writeHead(501, { 'Content-Type': 'application/json' });\n    res.end(JSON.stringify({ message: 'not implemented' }));\n\n});"},{"tags":[],"description":{"full":"<p>PUT tags (update)</p>","summary":"<p>PUT tags (update)</p>","body":""},"ignore":false,"code":"app.put('/tags/:id', function(req, res, headers){\n\n    // TODO\n    res.writeHead(501, { 'Content-Type': 'application/json' });\n    res.end(JSON.stringify({ message: 'not implemented' }));\n\n});\n\napp.del('/tags/:id', function(req, res, headers){\n\n    // TODO\n    // Interdire si documents ou forcer ?\n    res.writeHead(501, { 'Content-Type': 'application/json' });\n    res.end(JSON.stringify({ message: 'not implemented' }));\n\n});"},{"tags":[],"description":{"full":"<h2>Documentation</h2>","summary":"<h2>Documentation</h2>","body":""},"ignore":false},{"tags":[],"description":{"full":"<p>Introspection-based documentation<br />using app.routes.routes properties</p>","summary":"<p>Introspection-based documentation<br />using app.routes.routes properties</p>","body":""},"ignore":false,"code":"app.get('/documentation', function(req, res, headers){\n\n    var routesDoc = [];\n    var fillRoutesDoc = function(element, index, array){\n        routesDoc.push(element.method.toUpperCase() + ' ' + element.path);\n        // @TODO : prototype routes objt adding a getDocumentation method that fetch the documentation var of each route\n    };\n    app.routes.routes.get.forEach(fillRoutesDoc);\n    app.routes.routes.put.forEach(fillRoutesDoc);\n    app.routes.routes.post.forEach(fillRoutesDoc);\n    app.routes.routes.delete.forEach(fillRoutesDoc);\n\n    res.send({\n        \"Guacamole API REST server documentation\": {\n            \"Available requests URI\": routesDoc,\n        }\n    }, headers);\n\n});\n\n\napp.listen(port);\nconsole.log(\"Express server listening on port %d in %s mode\", app.address().port, app.settings.env);"}]